using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MagicVilla_VillaAPI.Models
{
    public class Villa
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public string Name { get; set; }
        public string Details { get; set; }
        public int Sqft { get; set; }
        public int Occupacy { get; set; }
        public double Rate { get; set; }
        public string ImageUrl { get; set; }
        public string Amenity { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime UpdatedDate { get; set; }
    }
}
// By default, if the name is Id, that property is treated as the primary key.
// You can explicitly use the [Key] attribute to specify a different property as the primary key - install the Nuget package System.ComponentModel.Annotations

/*
The [DatabaseGenerated(DatabaseGeneratedOption.Identity)] attribute in this code specifies how the value of the Id property is generated in the database.

Key Role of [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
Automatic Value Generation:
This attribute tells the Entity Framework (EF) that the database will automatically generate the value for the Id column whenever a new record is inserted.
The DatabaseGeneratedOption.Identity specifically means that the value is generated by the database when a new row is added (e.g., via an identity column or sequence).
Primary Key Management:
In this case, the Id property is marked as a primary key using the [Key] attribute.
With DatabaseGeneratedOption.Identity, we don't need to set the Id value manually in the code; the database will automatically assign it.

Common Use Case:
This is often used for auto-incrementing primary keys, where each new row gets a unique, automatically generated value for the Id.

 */

// Entity Framework Core - code first approach
// DbContext is the primary class that is responsible for interacting with the database.